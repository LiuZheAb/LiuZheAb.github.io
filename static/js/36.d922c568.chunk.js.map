{"version":3,"sources":["components/Documents/CodeReview/3.js","components/Directory/index.js"],"names":["index","className","to","style","paddingLeft","Component","props","bindHandleScroll","event","scrollTop","srcElement","documentElement","window","pageYOffset","body","setState","scrollToAnchor","anchorName","anchorElement","document","getElementById","scrollIntoView","block","behavior","state","articleTree","getArticleTree","bind","childrens","getElementsByClassName","children","i","length","nodeName","id","innerText","push","name","tag","this","header","before","scrollY","directory","offsetTop","addEventListener","onscroll","footer","H","offsetParent","s","offsetHeight","after","removeEventListener","array","targetObj","targetIndex","findIndex","n","map","key","title","onClick"],"mappings":"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","file":"static/js/36.d922c568.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Directory from \"../../Directory\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class index extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page-content\">\r\n                <div className=\"article\">\r\n                    <div className=\"article-title\">\r\n                        <h1>在评审中如何查看CL</h1>\r\n                    </div>\r\n                    <div className=\"article-content\">\r\n                        <h2>总结</h2>\r\n                        <p className=\"indent-2\">既然您知道要<Link to=\"/codereview/2\">查看什么</Link>，那么管理跨多个文件的评审的最有效方法是什么?</p>\r\n                        <ol style={{ paddingLeft: \"2em\" }}>\r\n                            <li>这种变化有意义吗?<Link to=\"/codereview/7\">描述</Link>得好吗?</li>\r\n                            <li>首先看看变化中最重要的部分。整体设计好吗?</li>\r\n                            <li>按照适当的顺序查看CL的其余部分。</li>\r\n                        </ol>\r\n                        <h2>第一步:从更广泛的角度看待更改</h2>\r\n                        <p className=\"indent-2\">看看<Link to=\"/codereview/7\">CL的描述</Link>，以及CL通常做什么。这种变化有意义吗?如果这个变更一开始就不应该发生，请立即回复并解释为什么不应该发生变更。当您拒绝这样的变更时，向开发人员建议他们应该做什么也是一个好主意。</p>\r\n                        <p className=\"indent-2\">例如，你可以说“看起来你在这方面做得不错，谢谢!”不过，我们实际上是在删除这里修改的FooWidget系统，所以我们现在不想对它做任何新的修改。不如重构我们的新BarWidget类?”</p>\r\n                        <p className=\"indent-2\">注意，评审人员不仅拒绝了当前的CL并提供了一个替代的建议，而且他们做得很有礼貌。这种礼貌是很重要的，因为我们想要表现出我们作为开发人员彼此尊重，即使我们意见不一致。</p>\r\n                        <p className=\"indent-2\">如果您得到了多个表示不希望进行更改的CL，那么您应该考虑重新处理团队的开发流程或外部贡献者发布的流程，以便在编写CL之前有更多的沟通。最好在人们完成大量工作之前就说“不”，这些工作现在必须扔掉或彻底重写。</p>\r\n                        <h2>第二步:检查CL的主要部分</h2>\r\n                        <p className=\"indent-2\">查找一个或多个文件，这些文件是这个CL的“主要”部分。通常，只有一个文件具有最多的逻辑更改，它是CL的主要部分。首先看看这些主要部分。这有助于为CL的所有较小部分提供上下文，并且通常会加速代码评审。如果CL太大，您无法确定哪些部分是主要部分，请询问开发人员应该首先查看什么，<Link to=\"/codereview/8\">或者让他们将CL分割成多个CL</Link>。</p>\r\n                        <p className=\"indent-2\">如果您看到CL的这一部分存在一些主要的设计问题，您应该立即发送这些评论，即使您现在没有时间来评审CL的其余部分。事实上，评审CL的其余部分可能是浪费时间，因为如果设计问题足够严重，那么许多其他正在检查的代码将会消失，不管怎样都无关紧要。</p>\r\n                        <p className=\"indent-2\">有两个很重要的原因，应该立即发送这些主要的设计意见:</p>\r\n                        <ul className=\"indent-2\">\r\n                            <li>开发人员通常会发送一个CL，然后在等待评审时立即基于该CL开始新的工作。如果您正在评审的CL中存在主要的设计问题，那么他们还必须重新编写后面的CL。提前捕捉它们以免在有问题的设计上做过多额外的工作。</li>\r\n                            <li>大的设计变更比小的变更需要更长的时间。开发人员几乎都有截止日期;为了在代码库中保持高质量代码的同时完成这些截止日期，开发人员需要根据CL尽快开始更新工作。</li>\r\n                        </ul>\r\n                        <h2>第三步:按照适当的顺序查看CL的其余部分</h2>\r\n                        <p className=\"indent-2\">当您确认整个CL没有主要的设计问题时，请尝试找出一个逻辑顺序来检查文件，同时确保您不会错过评审任何文件。通常，在您浏览完主要文件之后，按照代码评审工具显示的顺序浏览每个文件是最简单的。有时候，在阅读主代码之前先阅读测试也是有帮助的，因为这样你就知道了这个改变应该做什么。</p>\r\n                    </div>\r\n                </div>\r\n                <Directory />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","//文档右侧标题导航\r\nimport React, { Component, } from 'react';\r\nimport \"./index.less\";\r\n\r\nexport default class index extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            articleTree: [],\r\n            scrollTop: null\r\n        }\r\n        this.getArticleTree = this.getArticleTree.bind(this);\r\n    }\r\n    getArticleTree() {\r\n        let childrens = document.getElementsByClassName(\"article-content\")[0].children;\r\n        let articleTree = [];\r\n        for (let i = 0; i < childrens.length - 1; i++) {\r\n            let nodeName = childrens[i].nodeName;\r\n            if (nodeName === \"H2\" || nodeName === \"H3\") {\r\n                childrens[i].id = childrens[i].innerText;\r\n                articleTree.push({\r\n                    name: childrens[i].innerText,\r\n                    tag: childrens[i].nodeName\r\n                });\r\n            }\r\n        }\r\n        this.setState({ articleTree });\r\n    }\r\n    componentDidMount() {\r\n        //获取文档标题树\r\n        this.getArticleTree();\r\n        //页面滚动到文档末尾时，将directory逐渐向上隐藏\r\n        let header = document.getElementById(\"header\");\r\n        let before = window.scrollY;\r\n        let directory = document.getElementsByClassName(\"directory-list\")[0];\r\n        //offsetTop为页面加载时directory距顶端的距离\r\n        let offsetTop = directory.offsetTop;\r\n        window.addEventListener('scroll', this.bindHandleScroll);\r\n        window.onscroll = function () {\r\n            let footer = document.getElementsByClassName(\"page-footer\")[0], H = 0;\r\n            while (footer) {\r\n                //H为footer距顶端的距离\r\n                H += footer.offsetTop;\r\n                footer = footer.offsetParent;\r\n            }\r\n            let s = document.body.scrollTop || document.documentElement.scrollTop;\r\n            //s为当前滚动距离加offsetTop加directory高度,即directory底端距顶部的距离\r\n            s = s + (offsetTop + directory.offsetHeight);\r\n            //当s超出H时,directory向上收起\r\n            if (s > H + header.offsetHeight) {\r\n                directory.style = `position:fixed;top:${offsetTop - s + H}px;transition:none`;\r\n            } else {\r\n                // 在s<=H时,若向下滚动时,滚动距离超过header高度将header收起;向上滚动则将header显示,并且directory随header平移\r\n                let after = window.scrollY;\r\n                if (after > header.offsetHeight) {\r\n                    if (before < after) {\r\n                        header.className = \"ant-layout-header header header-affixed\";\r\n                        directory.className = \"directory-list directory-affixed\"\r\n                        before = after;\r\n                    };\r\n                    if (before > after) {\r\n                        header.className = \"ant-layout-header header header-visible\";\r\n                        directory.className = \"directory-list\"\r\n                        before = after;\r\n                    };\r\n                }\r\n                directory.style = \"\";\r\n            }\r\n        }\r\n    }\r\n    //获取滚动条滚动的高度\r\n    bindHandleScroll = (event) => {\r\n        const scrollTop = (event.srcElement ? event.srcElement.documentElement.scrollTop : false)\r\n            || window.pageYOffset\r\n            || (event.srcElement ? event.srcElement.body.scrollTop : 0);\r\n        this.setState({ scrollTop });\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.bindHandleScroll);\r\n    }\r\n    //点击directory跳转到锚点\r\n    scrollToAnchor = (anchorName) => {\r\n        if (anchorName) {\r\n            let anchorElement = document.getElementById(anchorName);\r\n            if (anchorElement) {\r\n                anchorElement.scrollIntoView({\r\n                    block: 'start',\r\n                    behavior: 'smooth'\r\n                });\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        let { articleTree, scrollTop } = this.state;\r\n        let length = articleTree.length;\r\n        if (document.getElementById(`tree-num-0`) && length > 0) {\r\n            let array = [];\r\n            //array内为所有锚点的offsetTop,从小到大排列\r\n            for (let i = 0; i < length; i++) {\r\n                let targetObj = document.getElementById(articleTree[i].name);\r\n                array.push(targetObj.offsetTop);\r\n            }\r\n            //targetIndex为array中第一个大于当前滚动距离的值的index,通过offsetTop判断当前滚动到哪个锚点,并改变对应的标题导航样式。\r\n            let targetIndex = array.findIndex((n) => n > scrollTop) - 1;\r\n            for (let i = 0; i < length; i++) {\r\n                i === targetIndex ? document.getElementById(`tree-num-${i}`).className = \"tree-num directory-item-active\" : document.getElementById(`tree-num-${i}`).className = \"tree-num\";\r\n            }\r\n            //当滚动距离超过最后一个锚点时,array中找不到,返回-1\r\n            if (targetIndex === -2) {\r\n                document.getElementById(`tree-num-${length - 1}`).className = \"tree-num directory-item-active\";\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"directory\">\r\n                <ul className=\"directory-list\">\r\n                    {articleTree.map((key, index) => {\r\n                        return (\r\n                            <li key={index} id={`tree-num-${index}`} className=\"tree-num\" title={key.name} style={{ paddingLeft: key.tag === \"H2\" ? 10 : 22 }} onClick={() => { this.scrollToAnchor(`${key.name}`) }}>{key.name}</li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}