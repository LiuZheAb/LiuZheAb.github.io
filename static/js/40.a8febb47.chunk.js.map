{"version":3,"sources":["components/Documents/CodeReview/7.js","components/Directory/index.js"],"names":["index","props","state","articleTree","getArticleTree","bind","childrens","document","getElementsByClassName","children","i","length","nodeName","id","innerText","push","name","tag","this","setState","className","Component","bindHandleScroll","event","scrollTop","srcElement","documentElement","window","pageYOffset","body","scrollToAnchor","anchorName","anchorElement","getElementById","scrollIntoView","block","behavior","header","before","scrollY","directory","offsetTop","addEventListener","onscroll","footer","H","offsetParent","s","offsetHeight","style","after","removeEventListener","array","targetObj","targetIndex","findIndex","n","map","key","title","paddingLeft","onClick","nextProps","prevState"],"mappings":"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","file":"static/js/40.a8febb47.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Directory from \"../../Directory\";\r\n\r\nexport default class index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            articleTree: []\r\n        };\r\n        this.getArticleTree = this.getArticleTree.bind(this);\r\n    }\r\n    getArticleTree() {\r\n        let childrens = document.getElementsByClassName(\"article-content\")[0].children;\r\n        let articleTree = [];\r\n        for (let i = 0; i < childrens.length - 1; i++) {\r\n            let nodeName = childrens[i].nodeName;\r\n            if (nodeName === \"H2\" || nodeName === \"H3\") {\r\n                childrens[i].id = childrens[i].innerText;\r\n                articleTree.push({\r\n                    name: childrens[i].innerText,\r\n                    tag: childrens[i].nodeName\r\n                });\r\n            }\r\n        }\r\n        this.setState({ articleTree });\r\n    }\r\n    componentDidMount() {\r\n        this.getArticleTree();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"page-content\">\r\n                <div className=\"article\">\r\n                    <div className=\"article-title\">\r\n                        <h1>写出好的CL文档</h1>\r\n                    </div>\r\n                    <div className=\"article-content\">\r\n                        <p className=\"indent-2\">CL文档是对<b>正在进行的更改及其原因的公开记录</b>。它将成为我们版本控制历史的一个永久部分，并且可能会被数百人阅读，而不是您的评审人员。</p>\r\n                        <p className=\"indent-2\">未来的开发人员将根据您的CL的文档来搜索它。将来有人可能会寻找你的改变，因为他们对你的改变有微弱的记忆，但却没有现成的细节。如果所有重要的信息都在代码中，而不是文档中，那么查找CL就会困难得多。</p>\r\n                        <h2>第一行</h2>\r\n                        <ul className=\"indent-2\">\r\n                            <li>对正在做的事情做一个简短的总结。</li>\r\n                            <li>完整的句子，写的好像它是一个命令。</li>\r\n                            <li>后面跟着空行。</li>\r\n                        </ul>\r\n                        <p className=\"indent-2\">CL文档的<b>第一行</b>应该是一个简短的总结，具体说明CL正在<b>做什么</b>，然后是一个空白行。这就是未来的大部分代码搜索者会看到当他们浏览一段代码版本控制的历史,这第一行应该足够的信息,他们不需要阅读你的CL或整个文档只是为了得到你的CL究竟做了什么。</p>\r\n                        <p className=\"indent-2\">按照传统，CL文档的第一行是一个完整的句子，写起来就像一个命令(一个祈使句)。例如，说“删除FizzBuzz RPC并用新系统替换它”，而不是“将要删除FizzBuzz RPC并将用新系统替换它”。不过，你不必把文档的其余部分写成祈使句。</p>\r\n                        <h2>主体提供信息</h2>\r\n                        <p className=\"indent-2\">文档的其余部分应该是信息丰富的。它可能包括对正在解决的问题的简要描述，以及为什么这是最好的方法。如果这种方法有任何缺点，应该提到。如果相关，包括背景信息，例如bug号、基准测试结果和设计文档的链接。</p>\r\n                        <p className=\"indent-2\">即使是很小型CL也需要注意一些细节。将CL放在上下文中。</p>\r\n                        <h2>坏的CL文档</h2>\r\n                        <p className=\"indent-2\">“修复bug”是一个不合适的CL文档。什么错误?你做了什么来修理它?其他类似的不良文档包括:</p>\r\n                        <ul className=\"indent-2\">\r\n                            <li>修复</li>\r\n                            <li>添加补丁</li>\r\n                            <li>将代码从A移动到B</li>\r\n                            <li>第1阶段</li>\r\n                            <li>添加便利功能</li>\r\n                            <li>删除奇怪的地址</li>\r\n                        </ul>\r\n                        <p className=\"indent-2\">其中一些是真实的CL文档。它们的作者可能认为它们提供了有用的信息，但是它们没有达到CL文档的目的。</p>\r\n                        <h2>好的CL文档</h2>\r\n                        <p className=\"indent-2\">下面是一些很好的例子。</p>\r\n                        <h3>功能变化</h3>\r\n                        <p className=\"indent-2\"><em>rpc:删除RPC服务器消息自由列表上的大小限制。</em></p>\r\n                        <p className=\"indent-2\"><em>像FizzBuzz这样的服务器拥有非常大的消息，并且可以从重用中获益。使自由列表更大，并添加一个线程，随着时间的推移缓慢地释放自由列表条目，以便空闲服务器最终释放所有自由列表条目。</em></p>\r\n                        <p className=\"indent-2\">前几句话描述了CL的实际功能。文档的其余部分将讨论正在解决的问题，为什么这是一个好的解决方案，以及关于特定实现的更多信息。</p>\r\n                        <h3>重构</h3>\r\n                        <p className=\"indent-2\"><em>使用计时器构造任务，以使用其TimeStr和Now方法。</em></p>\r\n                        <p className=\"indent-2\"><em>向Task添加一个Now方法，这样就可以删除borglet() getter方法(OOMCandidate只使用该方法来调用borglet's Now方法)。这将替换Borglet上委托给计时员的方法。</em></p>\r\n                        <p className=\"indent-2\"><em>现在允许任务提供是消除对Borglet依赖的一步。最终，依赖于现在完成任务的协作者应该被更改为直接使用计时器，但这是对小步骤重构的一种适应。</em></p>\r\n                        <p className=\"indent-2\"><em>继续重构Borglet层次结构的长期目标。</em></p>\r\n                        <p className=\"indent-2\">第一行描述了CL做了什么，以及这是如何从过去的变化。文档的其余部分讨论了特定的实现、CL的上下文、解决方案并不理想以及未来可能的方向。这也解释了为什么会发生这种变化。</p>\r\n                        <h3>需要一些上下文的小CL</h3>\r\n                        <p className=\"indent-2\"><em>为status.py创建Python3构建规则。</em></p>\r\n                        <p className=\"indent-2\"><em>这允许已经在Python3中使用该规则的消费者依赖于原始状态构建规则旁边的规则，而不是依赖于他们自己树中的某个地方。它鼓励新用户尽可能使用Python3，而不是Python2，并显著简化了当前正在使用的一些自动构建文件重构工具。</em></p>\r\n                        <p className=\"indent-2\">第一句话描述了实际在做什么。文档的其余部分解释了为什么要进行更改，并为审阅者提供了很多上下文。</p>\r\n                        <h2>在提交CL之前，请检查文档</h2>\r\n                        <p className=\"indent-2\">CL在评审期间可能会发生显著的变化。在提交CL之前，有必要检查CL文档，以确保文档仍然反映CL所做的工作。</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"directory\">\r\n                    <Directory articleTree={this.state.articleTree}></Directory>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","//文档右侧标题导航\r\nimport React, { Component, } from 'react';\r\nimport \"./index.less\";\r\n\r\nexport default class index extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            articleTree: this.props.articleTree,\r\n            scrollTop: null\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //页面滚动到文档末尾时，将directory逐渐向上隐藏\r\n        let header = document.getElementById(\"header\");\r\n        let before = window.scrollY;\r\n        let directory = document.getElementsByClassName(\"directory-list\")[0];\r\n        //offsetTop为页面加载时directory距顶端的距离\r\n        let offsetTop = directory.offsetTop;\r\n        window.addEventListener('scroll', this.bindHandleScroll);\r\n        window.onscroll = function () {\r\n            let footer = document.getElementsByClassName(\"page-footer\")[0], H = 0;\r\n            while (footer) {\r\n                //H为footer距顶端的距离\r\n                H += footer.offsetTop;\r\n                footer = footer.offsetParent;\r\n            }\r\n            let s = document.body.scrollTop || document.documentElement.scrollTop;\r\n            //s为当前滚动距离加offsetTop加directory高度,即directory底端距顶部的距离\r\n            s = s + (offsetTop + directory.offsetHeight);\r\n            //当s超出H时,directory向上收起\r\n            if (s > H + header.offsetHeight) {\r\n                directory.style = `position:fixed;top:${offsetTop - s + H}px;transition:none`;\r\n            } else {\r\n                // 在s<=H时,若向下滚动时,滚动距离超过header高度将header收起;向上滚动则将header显示,并且directory随header平移\r\n                let after = window.scrollY;\r\n                if (after > header.offsetHeight) {\r\n                    if (before < after) {\r\n                        header.className = \"ant-layout-header header header-affixed\";\r\n                        directory.className = \"directory-list directory-affixed\"\r\n                        before = after;\r\n                    };\r\n                    if (before > after) {\r\n                        header.className = \"ant-layout-header header header-visible\";\r\n                        directory.className = \"directory-list\"\r\n                        before = after;\r\n                    };\r\n                }\r\n                directory.style = \"\";\r\n            }\r\n        }\r\n    }\r\n    //获取滚动条滚动的高度\r\n    bindHandleScroll = (event) => {\r\n        const scrollTop = (event.srcElement ? event.srcElement.documentElement.scrollTop : false)\r\n            || window.pageYOffset\r\n            || (event.srcElement ? event.srcElement.body.scrollTop : 0);\r\n        this.setState({ scrollTop });\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.bindHandleScroll);\r\n    }\r\n    //点击directory跳转到锚点\r\n    scrollToAnchor = (anchorName) => {\r\n        if (anchorName) {\r\n            let anchorElement = document.getElementById(anchorName);\r\n            if (anchorElement) {\r\n                anchorElement.scrollIntoView({\r\n                    block: 'start',\r\n                    behavior: 'smooth'\r\n                });\r\n            }\r\n        }\r\n    }\r\n    //当props发生变化时改变articleTree\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        const { articleTree } = nextProps;\r\n        if (articleTree !== prevState.articleTree) {\r\n            return {\r\n                articleTree,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let { articleTree, scrollTop } = this.state;\r\n        let length = articleTree.length;\r\n        if (document.getElementById(`tree-num-0`) && length > 0) {\r\n            let array = [];\r\n            //array内为所有锚点的offsetTop,从小到大排列\r\n            for (let i = 0; i < length; i++) {\r\n                let targetObj = document.getElementById(articleTree[i].name);\r\n                array.push(targetObj.offsetTop);\r\n            }\r\n            //targetIndex为array中第一个大于当前滚动距离的值的index,通过offsetTop判断当前滚动到哪个锚点,并改变对应的标题导航样式。\r\n            let targetIndex = array.findIndex((n) => n > scrollTop) - 1;\r\n            for (let i = 0; i < length; i++) {\r\n                i === targetIndex ? document.getElementById(`tree-num-${i}`).className = \"tree-num directory-item-active\" : document.getElementById(`tree-num-${i}`).className = \"tree-num\";\r\n            }\r\n            //当滚动距离超过最后一个锚点时,array中找不到,返回-1\r\n            if (targetIndex === -2) {\r\n                document.getElementById(`tree-num-${length - 1}`).className = \"tree-num directory-item-active\";\r\n            }\r\n        }\r\n        return (\r\n            <ul className=\"directory-list\">\r\n                {articleTree.map((key, index) => {\r\n                    return (\r\n                        <li key={index} id={`tree-num-${index}`} className=\"tree-num\" title={key.name} style={{ paddingLeft: key.tag === \"H2\" ? 10 : 22 }} onClick={() => { this.scrollToAnchor(`${key.name}`) }}>{key.name}</li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}