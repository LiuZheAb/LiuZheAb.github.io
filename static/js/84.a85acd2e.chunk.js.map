{"version":3,"sources":["pages/CustomForm/index.js"],"names":["Option","TextArea","index","state","formName","itemList","itemNum","inputType","initCreateValues","changeFormName","e","setState","target","value","changeItemNum","disValue","parseInt","console","log","isNaN","i","push","itemName","type","defaultValue","currentValue","Math","abs","pop","refs","Form","resetFields","formNameValidator","rule","Promise","resolve","reject","itemNumValidator","itemNameValidator","arr","array","length","indexOf","checkRepeatName","itemTypeValidator","itemValueValidator","hash","saveItems","validateFields","then","name","makeJson","JSON","stringify","elementA","document","createElement","download","Date","style","display","blob","Blob","href","URL","createObjectURL","body","appendChild","click","removeChild","saveFile","catch","error","importItems","reader","FileReader","file","getElementById","files","_this","onload","importJson","parse","this","result","readAsText","title","split","undefined","splice","info","status","fileList","success","uploadProps","action","headers","authorization","className","fontSize","fontWeight","ref","initialValues","Item","label","rules","validator","maxWidth","placeholder","onChange","min","map","ifThreeColumns","props","initialValue","gutter","key","xs","bind","changeItemName","changeItemType","getValueFromEvent","replace","changeItemValue","lineHeight","onClick","handleDelete","textAlign","marginTop","id","accept","handleChange","Group","index2","options","autoSize","minRows","maxRows","cols","changeUpload","defaultFileList","Component"],"mappings":"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","file":"static/js/84.a85acd2e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Form, Button, InputNumber, Select, Input, Row, Col, message, Upload, Radio, Checkbox, Space } from \"antd\";\r\nimport { UploadOutlined, CloseCircleFilled } from '@ant-design/icons';\r\nimport \"./index.less\";\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nexport default class index extends Component {\r\n    state = {\r\n        formName: '',\r\n        itemList: [],\r\n        itemNum: 0,\r\n        inputType: [\"text\", \"radio\", \"checkbox\", \"select\", \"textarea\", \"upload\"],\r\n        initCreateValues: {}\r\n    };\r\n    componentDidMount() {\r\n        document.title = \"自定义表单\";\r\n    }\r\n    //表单名称\r\n    changeFormName = e => {\r\n        this.setState({ formName: e.target.value });\r\n    };\r\n    //控件数量\r\n    changeItemNum = value => {\r\n        let { itemList, itemNum } = this.state;\r\n        value = value ? parseInt(value) : 0;\r\n        //获取当前itemNum与前一个itemNum的差值\r\n        let disValue = value - itemNum;\r\n        console.log(value, itemNum)\r\n        if (value < 0 || isNaN(value)) {\r\n            itemList = [];\r\n            value = 0;\r\n        } else {\r\n            if (disValue > 0) {\r\n                for (let i = 0; i < disValue; i++) {\r\n                    itemList.push({ itemName: \"\", type: \"\", defaultValue: [], currentValue: \"\" });\r\n                };\r\n            } else {\r\n                disValue = Math.abs(disValue);\r\n                for (let i = 0; i < disValue; i++) {\r\n                    itemList.pop();\r\n                };\r\n            };\r\n        }\r\n        this.setState({\r\n            itemNum: value,\r\n            itemList\r\n        }, () => {\r\n            if (disValue < 0) { this.refs.Form.resetFields() };\r\n        });\r\n    };\r\n    //控件名称\r\n    changeItemName(index, e) {\r\n        let { itemList } = this.state;\r\n        itemList[index].itemName = e.target.value;\r\n        this.setState({ itemList });\r\n    };\r\n    //控件类型\r\n    changeItemType(index, value) {\r\n        let { itemList } = this.state;\r\n        itemList[index].type = value;\r\n        itemList[index].defaultValue = [];\r\n        itemList[index].currentValue = \"\";\r\n        this.setState({ itemList });\r\n    };\r\n    //控件默认值\r\n    changeItemValue(index, e) {\r\n        let defaultValue = [], value = e.target.value, { itemList } = this.state;\r\n        if (value !== null) {\r\n            //如果没有“,”，则输入的内容就是defaultValue\r\n            if (value.indexOf(\",\") === -1) {\r\n                defaultValue.push(value);\r\n            } //如果有“,”，则将输入的内容按“,”分隔开\r\n            else if (value.indexOf(\",\") > -1) {\r\n                defaultValue = value.split(\",\");\r\n            };\r\n            //删除空值或逗号\r\n            for (let i = 0; i < defaultValue.length; i++) {\r\n                if (defaultValue[i] === \"\" || defaultValue[i] === null || typeof defaultValue[i] === undefined || defaultValue[i] === \",\" || defaultValue[i] === \"，\") {\r\n                    defaultValue.splice(i, 1);\r\n                    i = i - 1;\r\n                }\r\n            };\r\n        }\r\n        itemList[index].defaultValue = defaultValue;\r\n        this.setState({ itemList: itemList });\r\n    };\r\n    handleDelete(index) {\r\n        let { itemList } = this.state;\r\n        itemList.splice(index, 1)\r\n        this.setState({ itemList, itemNum: itemList.length }, () => {\r\n            this.refs.Form.resetFields();\r\n        });\r\n    }\r\n    //表单验证\r\n    formNameValidator = (rule, value) => {\r\n        if (!value) {\r\n            return Promise.reject('表单名称不能为空');\r\n        } else {\r\n            return Promise.resolve();\r\n        };\r\n    };\r\n    itemNumValidator = (rule, value) => {\r\n        if (typeof (value) !== \"number\") {\r\n            return Promise.reject('控件数量必须为数字');\r\n        } else if (value === 0) {\r\n            return Promise.reject('控件个数不能为0');\r\n        } else if (parseInt(value) !== value) {\r\n            return Promise.reject('控件数量必须为整数');\r\n        } else if (!value) {\r\n            return Promise.reject('请输入控件个数');\r\n        } else {\r\n            return Promise.resolve();\r\n        };\r\n    }\r\n    itemNameValidator = (index, rule, value) => {\r\n        if (!value) {\r\n            return Promise.reject(`请输入控件 ${index + 1}的名称`);\r\n        } else {\r\n            let { itemList } = this.state;\r\n            let checkRepeatName = (arr, value, index) => {\r\n                let array = [];\r\n                for (let i = 0; i < arr.length; i++) {\r\n                    if (index !== i) {\r\n                        array.push(arr[i].itemName);\r\n                    }\r\n                };\r\n                if (array.indexOf(value) === -1) {\r\n                    return false;\r\n                } else {\r\n                    return true\r\n                }\r\n            };\r\n            if (!checkRepeatName(itemList, value, index)) {\r\n                return Promise.resolve();\r\n            } else {\r\n                return Promise.reject(\"控件名重复,请修改\");\r\n            }\r\n        };\r\n    };\r\n    itemTypeValidator = (index, rule, value) => {\r\n        if (!value) {\r\n            return Promise.reject(`请选择控件 ${index + 1}的类型`);\r\n        } else {\r\n            return Promise.resolve();\r\n        };\r\n    };\r\n    itemValueValidator = (index, rule, value) => {\r\n        if (!value || value.length === 0) {\r\n            return Promise.reject('默认值不能为空');\r\n        } else {\r\n            let hash = {}, defaultValue = this.state.itemList[index].defaultValue;\r\n            for (let i = 0; i < defaultValue.length; i++) {\r\n                if (hash[defaultValue[i]]) {\r\n                    return Promise.reject(\"不能有重复的选项，请修改\");\r\n                }\r\n                hash[defaultValue[i]] = true;\r\n            }\r\n            return Promise.resolve();\r\n        };\r\n    };\r\n    /**\r\n         * 表单value改变时调用\r\n         * @param {*} index 表单控件序号\r\n         * @param {*} type 表单控件类型\r\n         */\r\n    handleChange(index, type, e) {\r\n        let { itemList } = this.state;\r\n        itemList[index].currentValue = type === \"checkbox\" || type === \"select\" ? e : e.target.value;\r\n        this.setState({\r\n            itemList\r\n        });\r\n    }\r\n    changeUpload(index, info) {\r\n        if (info.file.status === \"done\") {\r\n            let { itemList } = this.state;\r\n            itemList[index].currentValue = info.fileList;\r\n            this.setState({ itemList });\r\n            message.success(`${info.file.name} 上传成功`);\r\n        } else if (info.file.status === \"error\") {\r\n            message.error(`${info.file.name} 上传失败`);\r\n        };\r\n    };\r\n\r\n\r\n    saveItems = () => {\r\n        let { formName, itemList } = this.state;\r\n        const saveFile = (name, itemList) => {\r\n            let makeJson = `{ \"formName\" :${JSON.stringify(name)}\r\n            ,\"itemList\" :${JSON.stringify(itemList)}}`;\r\n            //保存到本地\r\n            //虚拟dom实现下载   \r\n            var elementA = document.createElement('a');\r\n            elementA.download = +new Date() + \".json\";//文件名\r\n            //隐藏dom点不显示\r\n            elementA.style.display = 'none';\r\n            var blob = new Blob([makeJson]);//二进制\r\n            elementA.href = URL.createObjectURL(blob);\r\n            document.body.appendChild(elementA);\r\n            elementA.click();\r\n            document.body.removeChild(elementA);\r\n        }\r\n        this.refs.Form.validateFields()\r\n            .then(() => saveFile(formName, itemList))\r\n            .catch(() => { console.error(\"表单验证未通过\") })\r\n    }\r\n    importItems = (e) => {\r\n        if (e.target.value) {\r\n            let reader = new FileReader();\r\n            //读取json\r\n            let file = document.getElementById('file').files[0];\r\n            //外层作用域的重新定义\r\n            let _this = this;\r\n            reader.onload = function () {\r\n                var importJson = JSON.parse(this.result);\r\n                let { formName, itemList } = importJson;\r\n                _this.setState({\r\n                    formName,\r\n                    itemList,\r\n                    itemNum: itemList.length,\r\n                }, () => {\r\n                    //表单的initialValues属性只在初始化或重置时生效\r\n                    _this.refs.Form.resetFields();\r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        };\r\n    }\r\n    render() {\r\n        const { formName, itemNum, itemList, inputType } = this.state;\r\n        const uploadProps = {\r\n            name: 'file',\r\n            action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\r\n            headers: {\r\n                authorization: 'authorization-text',\r\n            },\r\n        };\r\n        let initCreateValues = {\r\n            formName: formName,\r\n            itemNum: itemNum,\r\n        };\r\n        return (\r\n            <div className=\"customform-container\">\r\n                <div className=\"create block\">\r\n                    <div style={{ fontSize: 20, fontWeight: \"600\" }}>在此处填写要生成的表单内容</div>\r\n                    <br />\r\n                    <Form className=\"create-form\" ref=\"Form\" initialValues={initCreateValues}>\r\n                        <Form.Item name=\"formName\" label=\"表单名称\" rules={[{ validator: this.formNameValidator }]} style={{ maxWidth: \"300px\" }}>\r\n                            <Input placeholder=\"表单名称\" onChange={this.changeFormName} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"itemNum\" label=\"表单控件数量\" rules={[{ validator: this.itemNumValidator }]}>\r\n                            <InputNumber onChange={this.changeItemNum} min={0} />\r\n                        </Form.Item>\r\n                        {/* 根据itemList数组生成控件列表 */}\r\n                        {itemList.map(({ itemName, type, defaultValue }, index) => {\r\n                            let ifThreeColumns = type === \"radio\" || type === \"checkbox\" || type === \"select\";\r\n                            let props = type ? { initialValue: type } : {};\r\n                            return (\r\n                                <Row gutter={10} key={index}>\r\n                                    <Col xs={ifThreeColumns ? 8 : 12}>\r\n                                        <Form.Item name={`itemName${index}`} label={`控件  ${index + 1}：`} key={`${index}Name`} rules={[{ validator: this.itemNameValidator.bind(this, index) }]} initialValue={itemName}>\r\n                                            <Input placeholder={`控件 ${index + 1}的名称`} onChange={this.changeItemName.bind(this, index)} />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col xs={ifThreeColumns ? 7 : 11}>\r\n                                        <Form.Item name={`itemType${index}`} key={`${index}Type`} rules={[{ validator: this.itemTypeValidator.bind(this, index) }]} {...props}>\r\n                                            <Select onChange={this.changeItemType.bind(this, index)} placeholder=\"--控件类型--\">\r\n                                                {inputType.map((type, index) => {\r\n                                                    return (\r\n                                                        <Option value={type} key={index}>\r\n                                                            {type === \"text\" ? \"输入框\" : (type === \"radio\" ? \"单选框\" : (type === \"checkbox\" ? \"复选框\" : (type === \"select\" ? \"选择器\" : (type === \"textarea\" ? \"文本域\" : (type === \"upload\" ? \"上传文件\" : null)))))}\r\n                                                        </Option>\r\n                                                    );\r\n                                                })}\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    {ifThreeColumns ?\r\n                                        <Col xs={8}>\r\n                                            <Form.Item name={`itemValue${index}`} key={`${index}Value`} rules={[{ validator: this.itemValueValidator.bind(this, index) }]} getValueFromEvent={e => e.target.value.replace(/\\uff0c/g, \",\")} initialValue={defaultValue}>\r\n                                                <Input placeholder={`请输入控件的默认值,以“,”隔开`} onChange={this.changeItemValue.bind(this, index)} />\r\n                                            </Form.Item>\r\n                                        </Col>\r\n                                        : null}\r\n                                    <Col xs={1} style={{ lineHeight: \"30px\" }}>\r\n                                        <CloseCircleFilled onClick={this.handleDelete.bind(this, index)} title=\"删除控件\"/>\r\n                                    </Col>\r\n                                </Row>\r\n                            )\r\n                        })}\r\n                        <Form.Item style={{ textAlign: \"center\", marginTop: \"24px\" }}>\r\n                            <Space>\r\n                                <Button type=\"primary\" onClick={this.saveItems}>保存表单数据</Button>\r\n                                <Button type=\"primary\" onClick={() => { document.getElementById(\"file\").click() }}>读取表单数据</Button>\r\n                                <input type=\"file\" name=\"import\" id=\"file\" accept=\".json\" onChange={this.importItems} style={{ display: \"none\" }} />\r\n                            </Space>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"show block\">\r\n                    <div style={{ fontSize: 20, fontWeight: \"600\" }}>预览表单</div>\r\n                    <div style={{ textAlign: \"center\", fontSize: 20 }}>{formName}</div>\r\n                    <br />\r\n                    <Form ref=\"showForm\">\r\n                        {itemList.map(({ itemName, type, defaultValue, currentValue }, index) => {\r\n                            switch (type) {\r\n                                case \"text\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <Input placeholder={itemName} onChange={this.handleChange.bind(this, index, type)} value={currentValue} defaultValue={currentValue} />\r\n                                    </Form.Item>;\r\n                                case \"radio\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <Radio.Group onChange={this.handleChange.bind(this, index, type)} value={currentValue} defaultValue={currentValue}>\r\n                                            {defaultValue.map((value, index2) => {\r\n                                                return (\r\n                                                    <Radio key={index2} value={value}>\r\n                                                        {value}\r\n                                                    </Radio>\r\n                                                );\r\n                                            })}\r\n                                        </Radio.Group>\r\n                                    </Form.Item>;\r\n                                case \"checkbox\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <Checkbox.Group options={defaultValue} onChange={this.handleChange.bind(this, index, type)} value={currentValue} defaultValue={currentValue} />\r\n                                    </Form.Item>;\r\n                                case \"select\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <Select onChange={this.handleChange.bind(this, index, type)} value={currentValue} defaultValue={currentValue}>\r\n                                            {defaultValue.map((value, index2) => {\r\n                                                return (\r\n                                                    <Option key={index2} value={value}>\r\n                                                        {value}\r\n                                                    </Option>\r\n                                                );\r\n                                            })}\r\n                                        </Select>\r\n                                    </Form.Item>;\r\n                                case \"textarea\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <TextArea autoSize={{ minRows: 4, maxRows: 20 }} cols={10} onChange={this.handleChange.bind(this, index, type)} value={currentValue} defaultValue={currentValue} />\r\n                                    </Form.Item>;\r\n                                case \"upload\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <Upload {...uploadProps} onChange={this.changeUpload.bind(this, index)} defaultFileList={currentValue}>\r\n                                            <Button type=\"default\"><UploadOutlined />上传文件</Button>\r\n                                        </Upload>\r\n                                    </Form.Item>;\r\n                                default:\r\n                                    return null;\r\n                            }\r\n                        })}\r\n                    </Form>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}"],"sourceRoot":""}