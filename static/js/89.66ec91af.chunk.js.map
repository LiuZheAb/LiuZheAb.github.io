{"version":3,"sources":["pages/CustomForm/index.js"],"names":["Option","TextArea","index","props","changeFormName","e","setState","formName","target","value","changeItemNum","state","itemList","itemNum","disValue","parseInt","isNaN","i","push","itemName","type","defaultValue","currentValue","Math","abs","pop","Form","current","resetFields","formNameValidator","rule","Promise","resolve","reject","itemNumValidator","itemNameValidator","arr","array","length","indexOf","checkRepeatName","itemTypeValidator","itemValueValidator","hash","saveItems","validateFields","then","name","makeJson","JSON","stringify","elementA","document","createElement","download","Date","style","display","blob","Blob","href","URL","createObjectURL","body","appendChild","click","removeChild","saveFile","catch","console","error","importItems","reader","FileReader","file","getElementById","files","_this","onload","importJson","parse","this","result","readAsText","inputType","initCreateValues","React","createRef","showForm","title","split","undefined","splice","info","status","fileList","success","uploadProps","action","headers","authorization","className","fontSize","fontWeight","ref","initialValues","Item","label","rules","validator","maxWidth","placeholder","onChange","min","map","ifThreeColumns","initialValue","gutter","key","span","xl","bind","changeItemName","changeItemType","getValueFromEvent","replace","changeItemValue","lineHeight","onClick","handleDelete","textAlign","marginTop","id","accept","handleChange","Group","index2","options","autoSize","minRows","maxRows","cols","changeUpload","defaultFileList","Component"],"mappings":"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","file":"static/js/89.66ec91af.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Form, Button, InputNumber, Select, Input, Row, Col, message, Upload, Radio, Checkbox, Space } from \"antd\";\r\nimport { UploadOutlined, CloseCircleFilled } from '@ant-design/icons';\r\nimport \"./index.less\";\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nexport default class index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            formName: '',\r\n            itemList: [],\r\n            itemNum: 0,\r\n            inputType: [\"text\", \"radio\", \"checkbox\", \"select\", \"textarea\", \"upload\"],\r\n            initCreateValues: {}\r\n        }\r\n        this.Form = React.createRef();\r\n        this.showForm = React.createRef();\r\n    }\r\n    componentDidMount() {\r\n        document.title = \"自定义表单\";\r\n    }\r\n    //表单名称\r\n    changeFormName = e => {\r\n        this.setState({ formName: e.target.value });\r\n    };\r\n    //控件数量\r\n    changeItemNum = value => {\r\n        let { itemList, itemNum } = this.state;\r\n        value = value ? parseInt(value) : 0;\r\n        //获取当前itemNum与前一个itemNum的差值\r\n        let disValue = value - itemNum;\r\n        if (value < 0 || isNaN(value)) {\r\n            itemList = [];\r\n            value = 0;\r\n        } else {\r\n            if (disValue > 0) {\r\n                for (let i = 0; i < disValue; i++) {\r\n                    itemList.push({ itemName: \"\", type: \"\", defaultValue: [], currentValue: \"\" });\r\n                };\r\n            } else {\r\n                disValue = Math.abs(disValue);\r\n                for (let i = 0; i < disValue; i++) {\r\n                    itemList.pop();\r\n                };\r\n            };\r\n        }\r\n        this.setState({\r\n            itemNum: value,\r\n            itemList\r\n        }, () => {\r\n            if (disValue < 0) { this.Form.current.resetFields() };\r\n        });\r\n    };\r\n    //控件名称\r\n    changeItemName(index, e) {\r\n        let { itemList } = this.state;\r\n        itemList[index].itemName = e.target.value;\r\n        this.setState({ itemList });\r\n    };\r\n    //控件类型\r\n    changeItemType(index, value) {\r\n        let { itemList } = this.state;\r\n        itemList[index].type = value;\r\n        itemList[index].defaultValue = [];\r\n        itemList[index].currentValue = \"\";\r\n        this.setState({ itemList });\r\n    };\r\n    //控件默认值\r\n    changeItemValue(index, e) {\r\n        let defaultValue = [], value = e.target.value, { itemList } = this.state;\r\n        if (value !== null) {\r\n            //如果没有“,”，则输入的内容就是defaultValue\r\n            if (value.indexOf(\",\") === -1) {\r\n                defaultValue.push(value);\r\n            } //如果有“,”，则将输入的内容按“,”分隔开\r\n            else if (value.indexOf(\",\") > -1) {\r\n                defaultValue = value.split(\",\");\r\n            };\r\n            //删除空值或逗号\r\n            for (let i = 0; i < defaultValue.length; i++) {\r\n                if (defaultValue[i] === \"\" || defaultValue[i] === null || typeof defaultValue[i] === undefined || defaultValue[i] === \",\" || defaultValue[i] === \"，\") {\r\n                    defaultValue.splice(i, 1);\r\n                    i = i - 1;\r\n                }\r\n            };\r\n        }\r\n        itemList[index].defaultValue = defaultValue;\r\n        this.setState({ itemList: itemList });\r\n    };\r\n    handleDelete(index) {\r\n        let { itemList } = this.state;\r\n        itemList.splice(index, 1)\r\n        this.setState({ itemList, itemNum: itemList.length }, () => {\r\n            this.Form.current.resetFields();\r\n        });\r\n    }\r\n    //表单验证\r\n    formNameValidator = (rule, value) => {\r\n        if (!value) {\r\n            return Promise.reject('表单名称不能为空');\r\n        } else {\r\n            return Promise.resolve();\r\n        };\r\n    };\r\n    itemNumValidator = (rule, value) => {\r\n        if (typeof (value) !== \"number\") {\r\n            return Promise.reject('控件数量必须为数字');\r\n        } else if (value === 0) {\r\n            return Promise.reject('控件个数不能为0');\r\n        } else if (parseInt(value) !== value) {\r\n            return Promise.reject('控件数量必须为整数');\r\n        } else if (!value) {\r\n            return Promise.reject('请输入控件个数');\r\n        } else {\r\n            return Promise.resolve();\r\n        };\r\n    }\r\n    itemNameValidator = (index, rule, value) => {\r\n        if (!value) {\r\n            return Promise.reject(`请输入控件 ${index + 1}的名称`);\r\n        } else {\r\n            let { itemList } = this.state;\r\n            let checkRepeatName = (arr, value, index) => {\r\n                let array = [];\r\n                for (let i = 0; i < arr.length; i++) {\r\n                    if (index !== i) {\r\n                        array.push(arr[i].itemName);\r\n                    }\r\n                };\r\n                if (array.indexOf(value) === -1) {\r\n                    return false;\r\n                } else {\r\n                    return true\r\n                }\r\n            };\r\n            if (!checkRepeatName(itemList, value, index)) {\r\n                return Promise.resolve();\r\n            } else {\r\n                return Promise.reject(\"控件名重复,请修改\");\r\n            }\r\n        };\r\n    };\r\n    itemTypeValidator = (index, rule, value) => {\r\n        if (!value) {\r\n            return Promise.reject(`请选择控件 ${index + 1}的类型`);\r\n        } else {\r\n            return Promise.resolve();\r\n        };\r\n    };\r\n    itemValueValidator = (index, rule, value) => {\r\n        if (!value || value.length === 0) {\r\n            return Promise.reject('默认值不能为空');\r\n        } else {\r\n            let hash = {}, defaultValue = this.state.itemList[index].defaultValue;\r\n            for (let i = 0; i < defaultValue.length; i++) {\r\n                if (hash[defaultValue[i]]) {\r\n                    return Promise.reject(\"不能有重复的选项，请修改\");\r\n                }\r\n                hash[defaultValue[i]] = true;\r\n            }\r\n            return Promise.resolve();\r\n        };\r\n    };\r\n    /**\r\n         * 表单value改变时调用\r\n         * @param {*} index 表单控件序号\r\n         * @param {*} type 表单控件类型\r\n         */\r\n    handleChange(index, type, e) {\r\n        let { itemList } = this.state;\r\n        itemList[index].currentValue = type === \"checkbox\" || type === \"select\" ? e : e.target.value;\r\n        this.setState({\r\n            itemList\r\n        });\r\n    }\r\n    changeUpload(index, info) {\r\n        if (info.file.status === \"done\") {\r\n            let { itemList } = this.state;\r\n            itemList[index].currentValue = info.fileList;\r\n            this.setState({ itemList });\r\n            message.success(`${info.file.name} 上传成功`);\r\n        } else if (info.file.status === \"error\") {\r\n            message.error(`${info.file.name} 上传失败`);\r\n        };\r\n    };\r\n    saveItems = () => {\r\n        let { formName, itemList } = this.state;\r\n        const saveFile = (name, itemList) => {\r\n            let makeJson = `{ \"formName\" :${JSON.stringify(name)}\r\n            ,\"itemList\" :${JSON.stringify(itemList)}}`;\r\n            //保存到本地\r\n            //虚拟dom实现下载   \r\n            var elementA = document.createElement('a');\r\n            elementA.download = +new Date() + \".json\";//文件名\r\n            //隐藏dom点不显示\r\n            elementA.style.display = 'none';\r\n            var blob = new Blob([makeJson]);//二进制\r\n            elementA.href = URL.createObjectURL(blob);\r\n            document.body.appendChild(elementA);\r\n            elementA.click();\r\n            document.body.removeChild(elementA);\r\n        }\r\n        this.Form.current.validateFields()\r\n            .then(() => saveFile(formName, itemList))\r\n            .catch(() => { console.error(\"表单验证未通过\") })\r\n    }\r\n    importItems = e => {\r\n        if (e.target.value) {\r\n            let reader = new FileReader();\r\n            //读取json\r\n            let file = document.getElementById('file').files[0];\r\n            //外层作用域的重新定义\r\n            let _this = this;\r\n            reader.onload = function () {\r\n                let importJson = JSON.parse(this.result);\r\n                let { formName, itemList } = importJson;\r\n                _this.setState({\r\n                    formName,\r\n                    itemList,\r\n                    itemNum: itemList.length,\r\n                }, () => {\r\n                    //表单的initialValues属性只在初始化或重置时生效\r\n                    _this.Form.current.resetFields();\r\n                });\r\n            };\r\n            reader.readAsText(file);\r\n        };\r\n    }\r\n    render() {\r\n        const { formName, itemNum, itemList, inputType } = this.state;\r\n        const uploadProps = {\r\n            name: 'file',\r\n            action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\r\n            headers: {\r\n                authorization: 'authorization-text',\r\n            },\r\n        };\r\n        let initCreateValues = {\r\n            formName: formName,\r\n            itemNum: itemNum,\r\n        };\r\n        return (\r\n            <div className=\"customform-container\">\r\n                <div className=\"create block\">\r\n                    <div style={{ fontSize: 20, fontWeight: \"600\" }}>在此处填写要生成的表单内容</div>\r\n                    <br />\r\n                    <Form className=\"create-form\" ref={this.Form} initialValues={initCreateValues}>\r\n                        <Form.Item name=\"formName\" label=\"表单名称\" rules={[{ validator: this.formNameValidator }]} style={{ maxWidth: \"300px\" }}>\r\n                            <Input placeholder=\"表单名称\" onChange={this.changeFormName} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"itemNum\" label=\"表单控件数量\" rules={[{ validator: this.itemNumValidator }]}>\r\n                            <InputNumber onChange={this.changeItemNum} min={0} />\r\n                        </Form.Item>\r\n                        {/* 根据itemList数组生成控件列表 */}\r\n                        {itemList.map(({ itemName, type, defaultValue }, index) => {\r\n                            let ifThreeColumns = type === \"radio\" || type === \"checkbox\" || type === \"select\";\r\n                            let props = type ? { initialValue: type } : {};\r\n                            return (\r\n                                <Row gutter={10} key={index} className=\"item-line\">\r\n                                    <Col span={24} xl={ifThreeColumns ? 10 : 12}>\r\n                                        <Form.Item name={`itemName${index}`} label={`控件  ${index + 1}：`} key={`${index}Name`} rules={[{ validator: this.itemNameValidator.bind(this, index) }]} initialValue={itemName}>\r\n                                            <Input placeholder={`控件 ${index + 1}的名称`} onChange={this.changeItemName.bind(this, index)} />\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    <Col span={24} xl={ifThreeColumns ? 7 : 12}>\r\n                                        <Form.Item className=\"col-nolabel\" name={`itemType${index}`} key={`${index}Type`} rules={[{ validator: this.itemTypeValidator.bind(this, index) }]} {...props}>\r\n                                            <Select onChange={this.changeItemType.bind(this, index)} placeholder=\"--控件类型--\">\r\n                                                {inputType.map((type, index) => {\r\n                                                    return (\r\n                                                        <Option value={type} key={index}>\r\n                                                            {type === \"text\" ? \"输入框\" : (type === \"radio\" ? \"单选框\" : (type === \"checkbox\" ? \"复选框\" : (type === \"select\" ? \"选择器\" : (type === \"textarea\" ? \"文本域\" : (type === \"upload\" ? \"上传文件\" : null)))))}\r\n                                                        </Option>\r\n                                                    );\r\n                                                })}\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                    {ifThreeColumns ?\r\n                                        <Col span={24} xl={7}>\r\n                                            <Form.Item className=\"col-nolabel\" name={`itemValue${index}`} key={`${index}Value`} rules={[{ validator: this.itemValueValidator.bind(this, index) }]} getValueFromEvent={e => e.target.value.replace(/\\uff0c/g, \",\")} initialValue={defaultValue}>\r\n                                                <Input placeholder={`请输入控件的默认值,以“,”隔开`} onChange={this.changeItemValue.bind(this, index)} />\r\n                                            </Form.Item>\r\n                                        </Col>\r\n                                        : null}\r\n                                    <Col style={{ lineHeight: \"30px\" }} className=\"delete-btn\">\r\n                                        <CloseCircleFilled onClick={this.handleDelete.bind(this, index)} title=\"删除控件\" />\r\n                                    </Col>\r\n                                </Row>\r\n                            )\r\n                        })}\r\n                        <Form.Item style={{ textAlign: \"center\", marginTop: \"24px\" }}>\r\n                            <Space>\r\n                                <Button type=\"primary\" onClick={this.saveItems}>保存表单数据</Button>\r\n                                <Button type=\"primary\" onClick={() => { document.getElementById(\"file\").click() }}>读取表单数据</Button>\r\n                                <input type=\"file\" name=\"import\" id=\"file\" accept=\".json\" onChange={this.importItems} style={{ display: \"none\" }} />\r\n                            </Space>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"show block\">\r\n                    <div style={{ fontSize: 20, fontWeight: \"600\" }}>预览表单</div>\r\n                    <div style={{ textAlign: \"center\", fontSize: 20 }}>{formName}</div>\r\n                    <br />\r\n                    <Form ref={this.showForm}>\r\n                        {itemList.map(({ itemName, type, defaultValue, currentValue }, index) => {\r\n                            switch (type) {\r\n                                case \"text\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <Input placeholder={itemName} onChange={this.handleChange.bind(this, index, type)} value={currentValue} defaultValue={currentValue} />\r\n                                    </Form.Item>;\r\n                                case \"radio\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <Radio.Group onChange={this.handleChange.bind(this, index, type)} value={currentValue} defaultValue={currentValue}>\r\n                                            {defaultValue.map((value, index2) => {\r\n                                                return (\r\n                                                    <Radio key={index2} value={value}>\r\n                                                        {value}\r\n                                                    </Radio>\r\n                                                );\r\n                                            })}\r\n                                        </Radio.Group>\r\n                                    </Form.Item>;\r\n                                case \"checkbox\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <Checkbox.Group options={defaultValue} onChange={this.handleChange.bind(this, index, type)} value={currentValue} defaultValue={currentValue} />\r\n                                    </Form.Item>;\r\n                                case \"select\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <Select onChange={this.handleChange.bind(this, index, type)} value={currentValue} defaultValue={currentValue}>\r\n                                            {defaultValue.map((value, index2) => {\r\n                                                return (\r\n                                                    <Option key={index2} value={value}>\r\n                                                        {value}\r\n                                                    </Option>\r\n                                                );\r\n                                            })}\r\n                                        </Select>\r\n                                    </Form.Item>;\r\n                                case \"textarea\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <TextArea autoSize={{ minRows: 4, maxRows: 20 }} cols={10} onChange={this.handleChange.bind(this, index, type)} value={currentValue} defaultValue={currentValue} />\r\n                                    </Form.Item>;\r\n                                case \"upload\":\r\n                                    return <Form.Item label={itemName} key={index}>\r\n                                        <Upload {...uploadProps} onChange={this.changeUpload.bind(this, index)} defaultFileList={currentValue}>\r\n                                            <Button type=\"default\"><UploadOutlined />上传文件</Button>\r\n                                        </Upload>\r\n                                    </Form.Item>;\r\n                                default:\r\n                                    return null;\r\n                            }\r\n                        })}\r\n                    </Form>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}"],"sourceRoot":""}