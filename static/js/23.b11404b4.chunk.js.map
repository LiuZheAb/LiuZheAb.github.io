{"version":3,"sources":["../node_modules/codemirror/addon/mode/multiplex.js","../node_modules/codemirror/mode/twig/twig.js"],"names":["CodeMirror","multiplexingMode","outer","others","Array","prototype","slice","call","arguments","indexOf","string","pattern","from","returnEnd","found","length","m","exec","index","startState","innerActive","inner","copyState","state","mode","token","stream","curInner","oldContent","close","sol","this","pos","parseDelimiters","match","delimStyle","innerToken","innerStyle","cutOff","Infinity","i","other","open","outerIndent","indent","possibleOuterIndent","Pass","outerToken","textAfter","line","blankLine","electricChars","innerMode","mod","require","defineMode","keywords","operator","sign","atom","number","RegExp","join","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","instring","next","eat","tokenBase","config","parserConfig","twigInner","getMode","base","defineMIME"],"mappings":"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","file":"static/js/23.b11404b4.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.multiplexingMode = function(outer /*, others */) {\n  // Others should be {open, close, mode [, delimStyle] [, innerStyle]} objects\n  var others = Array.prototype.slice.call(arguments, 1);\n\n  function indexOf(string, pattern, from, returnEnd) {\n    if (typeof pattern == \"string\") {\n      var found = string.indexOf(pattern, from);\n      return returnEnd && found > -1 ? found + pattern.length : found;\n    }\n    var m = pattern.exec(from ? string.slice(from) : string);\n    return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n  }\n\n  return {\n    startState: function() {\n      return {\n        outer: CodeMirror.startState(outer),\n        innerActive: null,\n        inner: null\n      };\n    },\n\n    copyState: function(state) {\n      return {\n        outer: CodeMirror.copyState(outer, state.outer),\n        innerActive: state.innerActive,\n        inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner)\n      };\n    },\n\n    token: function(stream, state) {\n      if (!state.innerActive) {\n        var cutOff = Infinity, oldContent = stream.string;\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          var found = indexOf(oldContent, other.open, stream.pos);\n          if (found == stream.pos) {\n            if (!other.parseDelimiters) stream.match(other.open);\n            state.innerActive = other;\n\n            // Get the outer indent, making sure to handle CodeMirror.Pass\n            var outerIndent = 0;\n            if (outer.indent) {\n              var possibleOuterIndent = outer.indent(state.outer, \"\", \"\");\n              if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n            }\n\n            state.inner = CodeMirror.startState(other.mode, outerIndent);\n            return other.delimStyle && (other.delimStyle + \" \" + other.delimStyle + \"-open\");\n          } else if (found != -1 && found < cutOff) {\n            cutOff = found;\n          }\n        }\n        if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n        var outerToken = outer.token(stream, state.outer);\n        if (cutOff != Infinity) stream.string = oldContent;\n        return outerToken;\n      } else {\n        var curInner = state.innerActive, oldContent = stream.string;\n        if (!curInner.close && stream.sol()) {\n          state.innerActive = state.inner = null;\n          return this.token(stream, state);\n        }\n        var found = curInner.close ? indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n        if (found == stream.pos && !curInner.parseDelimiters) {\n          stream.match(curInner.close);\n          state.innerActive = state.inner = null;\n          return curInner.delimStyle && (curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\");\n        }\n        if (found > -1) stream.string = oldContent.slice(0, found);\n        var innerToken = curInner.mode.token(stream, state.inner);\n        if (found > -1) stream.string = oldContent;\n\n        if (found == stream.pos && curInner.parseDelimiters)\n          state.innerActive = state.inner = null;\n\n        if (curInner.innerStyle) {\n          if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;\n          else innerToken = curInner.innerStyle;\n        }\n\n        return innerToken;\n      }\n    },\n\n    indent: function(state, textAfter, line) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (!mode.indent) return CodeMirror.Pass;\n      return mode.indent(state.innerActive ? state.inner : state.outer, textAfter, line);\n    },\n\n    blankLine: function(state) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (mode.blankLine) {\n        mode.blankLine(state.innerActive ? state.inner : state.outer);\n      }\n      if (!state.innerActive) {\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          if (other.open === \"\\n\") {\n            state.innerActive = other;\n            state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\", \"\") : 0);\n          }\n        }\n      } else if (state.innerActive.close === \"\\n\") {\n        state.innerActive = state.inner = null;\n      }\n    },\n\n    electricChars: outer.electricChars,\n\n    innerMode: function(state) {\n      return state.inner ? {state: state.inner, mode: state.innerActive.mode} : {state: state.outer, mode: outer};\n    }\n  };\n};\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"),  require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"twig:inner\", function() {\n    var keywords = [\"and\", \"as\", \"autoescape\", \"endautoescape\", \"block\", \"do\", \"endblock\", \"else\", \"elseif\", \"extends\", \"for\", \"endfor\", \"embed\", \"endembed\", \"filter\", \"endfilter\", \"flush\", \"from\", \"if\", \"endif\", \"in\", \"is\", \"include\", \"import\", \"not\", \"or\", \"set\", \"spaceless\", \"endspaceless\", \"with\", \"endwith\", \"trans\", \"endtrans\", \"blocktrans\", \"endblocktrans\", \"macro\", \"endmacro\", \"use\", \"verbatim\", \"endverbatim\"],\n        operator = /^[+\\-*&%=<>!?|~^]/,\n        sign = /^[:\\[\\(\\{]/,\n        atom = [\"true\", \"false\", \"null\", \"empty\", \"defined\", \"divisibleby\", \"divisible by\", \"even\", \"odd\", \"iterable\", \"sameas\", \"same as\"],\n        number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if (!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if (state.operator) {\n          state.operator = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if (state.sign) {\n          state.sign = false;\n          if (stream.match(atom)) {\n            return \"atom\";\n          }\n          if (stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if (state.instring) {\n          if (ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if (ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if (stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if (stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if (stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if (stream.eat(\" \") || stream.sol()) {\n            if (stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if (stream.match(atom)) {\n              return \"atom\";\n            }\n            if (stream.match(number)) {\n              return \"number\";\n            }\n            if (stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if (!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if (ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {};\n      },\n      token: function (stream, state) {\n        return tokenBase(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"twig\", function(config, parserConfig) {\n    var twigInner = CodeMirror.getMode(config, \"twig:inner\");\n    if (!parserConfig || !parserConfig.base) return twigInner;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base), {\n        open: /\\{[{#%]/, close: /[}#%]\\}/, mode: twigInner, parseDelimiters: true\n      }\n    );\n  });\n  CodeMirror.defineMIME(\"text/x-twig\", \"twig\");\n});\n"],"sourceRoot":""}