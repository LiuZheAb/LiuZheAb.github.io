{"version":3,"sources":["components/Directory/index.js","components/Documents/CodeReview/Chapters/08.js"],"names":["index","props","bindHandleScroll","event","scrollTop","srcElement","documentElement","window","pageYOffset","body","setState","scrollToAnchor","anchorName","anchorElement","document","getElementById","scrollIntoView","block","behavior","state","articleTree","header","before","scrollY","directory","getElementsByClassName","offsetTop","addEventListener","this","onscroll","footer","H","offsetParent","s","offsetHeight","style","after","className","removeEventListener","length","array","i","targetObj","name","push","targetIndex","findIndex","n","map","key","id","title","paddingLeft","tag","onClick","nextProps","prevState","Component","getArticleTree","bind","childrens","children","nodeName","innerText"],"mappings":"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","file":"static/js/47.905bbc9c.chunk.js","sourcesContent":["//文档右侧标题导航\r\nimport React, { Component, } from 'react';\r\nimport \"./index.less\";\r\n\r\nexport default class index extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            articleTree: this.props.articleTree,\r\n            scrollTop: null\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //页面滚动到文档末尾时，将directory逐渐向上隐藏\r\n        let header = document.getElementById(\"header\");\r\n        let before = window.scrollY;\r\n        let directory = document.getElementsByClassName(\"directory-list\")[0];\r\n        //offsetTop为页面加载时directory距顶端的距离\r\n        let offsetTop = directory.offsetTop;\r\n        window.addEventListener('scroll', this.bindHandleScroll);\r\n        window.onscroll = function () {\r\n            let footer = document.getElementsByClassName(\"page-footer\")[0], H = 0;\r\n            while (footer) {\r\n                //H为footer距顶端的距离\r\n                H += footer.offsetTop;\r\n                footer = footer.offsetParent;\r\n            }\r\n            let s = document.body.scrollTop || document.documentElement.scrollTop;\r\n            //s为当前滚动距离加offsetTop加directory高度,即directory底端距顶部的距离\r\n            s = s + (offsetTop + directory.offsetHeight);\r\n            //当s超出H时,directory向上收起\r\n            if (s > H + header.offsetHeight) {\r\n                directory.style = `position:fixed;top:${offsetTop - s + H}px;transition:none`;\r\n            } else {\r\n                // 在s<=H时,若向下滚动时,滚动距离超过header高度将header收起;向上滚动则将header显示,并且directory随header平移\r\n                let after = window.scrollY;\r\n                if (after > header.offsetHeight) {\r\n                    if (before < after) {\r\n                        header.className = \"ant-layout-header header header-affixed\";\r\n                        directory.className = \"directory-list directory-affixed\"\r\n                        before = after;\r\n                    };\r\n                    if (before > after) {\r\n                        header.className = \"ant-layout-header header header-visible\";\r\n                        directory.className = \"directory-list\"\r\n                        before = after;\r\n                    };\r\n                }\r\n                directory.style = \"\";\r\n            }\r\n        }\r\n    }\r\n    //获取滚动条滚动的高度\r\n    bindHandleScroll = (event) => {\r\n        const scrollTop = (event.srcElement ? event.srcElement.documentElement.scrollTop : false)\r\n            || window.pageYOffset\r\n            || (event.srcElement ? event.srcElement.body.scrollTop : 0);\r\n        this.setState({ scrollTop });\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.bindHandleScroll);\r\n    }\r\n    //点击directory跳转到锚点\r\n    scrollToAnchor = (anchorName) => {\r\n        if (anchorName) {\r\n            let anchorElement = document.getElementById(anchorName);\r\n            if (anchorElement) {\r\n                anchorElement.scrollIntoView({\r\n                    block: 'start',\r\n                    behavior: 'smooth'\r\n                });\r\n            }\r\n        }\r\n    }\r\n    //当props发生变化时改变articleTree\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        const { articleTree } = nextProps;\r\n        if (articleTree !== prevState.articleTree) {\r\n            return {\r\n                articleTree,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let { articleTree, scrollTop } = this.state;\r\n        let length = articleTree.length;\r\n        if (document.getElementById(`tree-num-0`) && length > 0) {\r\n            let array = [];\r\n            //array内为所有锚点的offsetTop,从小到大排列\r\n            for (let i = 0; i < length; i++) {\r\n                let targetObj = document.getElementById(articleTree[i].name);\r\n                array.push(targetObj.offsetTop);\r\n            }\r\n            //targetIndex为array中第一个大于当前滚动距离的值的index,通过offsetTop判断当前滚动到哪个锚点,并改变对应的标题导航样式。\r\n            let targetIndex = array.findIndex((n) => n > scrollTop) - 1;\r\n            for (let i = 0; i < length; i++) {\r\n                i === targetIndex ? document.getElementById(`tree-num-${i}`).className = \"tree-num directory-item-active\" : document.getElementById(`tree-num-${i}`).className = \"tree-num\";\r\n            }\r\n            //当滚动距离超过最后一个锚点时,array中找不到,返回-1\r\n            if (targetIndex === -2) {\r\n                document.getElementById(`tree-num-${length - 1}`).className = \"tree-num directory-item-active\";\r\n            }\r\n        }\r\n        return (\r\n            <ul className=\"directory-list\">\r\n                {articleTree.map((key, index) => {\r\n                    return (\r\n                        <li key={index} id={`tree-num-${index}`} className=\"tree-num\" title={key.name} style={{ paddingLeft: key.tag === \"H2\" ? 10 : 22 }} onClick={() => { this.scrollToAnchor(`${key.name}`) }}>{key.name}</li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Directory from \"../../../Directory\";\r\n\r\nexport default class index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            articleTree: []\r\n        };\r\n        this.getArticleTree = this.getArticleTree.bind(this);\r\n    }\r\n    getArticleTree() {\r\n        let childrens = document.getElementsByClassName(\"article-content\")[0].children;\r\n        let articleTree = [];\r\n        for (let i = 0; i < childrens.length - 1; i++) {\r\n            let nodeName = childrens[i].nodeName;\r\n            if (nodeName === \"H2\" || nodeName === \"H3\") {\r\n                childrens[i].id = childrens[i].innerText;\r\n                articleTree.push({\r\n                    name: childrens[i].innerText,\r\n                    tag: childrens[i].nodeName\r\n                });\r\n            }\r\n        }\r\n        this.setState({ articleTree });\r\n    }\r\n    componentDidMount() {\r\n        document.title = \"Code Review——小型CL\";\r\n        this.getArticleTree();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"page-content\">\r\n                <div className=\"article\">\r\n                    <div className=\"article-title\">\r\n                        <h1>小型CL</h1>\r\n                    </div>\r\n                    <div className=\"article-content\">\r\n                        <h2>为什么要编写小型CL?</h2>\r\n                        <p className=\"indent-2\">小，简单的CL是:</p>\r\n                        <ul className=\"indent-2\">\r\n                            <li><b>评审地更快</b>。对于评审人员来说，几次花5分钟来评审小型CL要比留出30分钟来评审大型CL容易得多。</li>\r\n                            <li><b>更彻底地评审</b>。随着大的变化，评审人员和作者往往会因为大量的详细评论来回转换而感到沮丧——有时会到遗漏或删除重要观点的程度。</li>\r\n                            <li><b>不太可能引入bug</b>。由于您所做的更改更少，因此您和您的评审人员更容易有效地推断CL的影响，并查看是否引入了错误。</li>\r\n                            <li><b>如果被拒绝，浪费的工作就会更少</b>。如果你写了一个很大的CL，然后你的评审人员说总体方向是错误的，那么你已经浪费了很多工作。</li>\r\n                            <li><b>容易合并</b>。处理大型CL需要很长时间，所以在合并时将会有很多冲突，而且必须经常合并。</li>\r\n                            <li><b>易于设计</b>。优化一个小更改的设计和代码运行状况要比细化一个大更改的所有细节容易得多。</li>\r\n                            <li><b>减少对评论的封锁</b>。发送整体更改的自包含部分允许您在等待当前CL检查期间继续编码。</li>\r\n                            <li><b>回滚更简单</b>。大型CL更有可能接触到在初始CL提交和回滚CL之间更新的文件，从而使回滚复杂化(中间的CL可能也需要回滚)。</li>\r\n                        </ul>\r\n                        <p className=\"indent-2\">请注意，<b>评审人员有权以更改太大为唯一理由直接拒绝更改</b>。通常他们会感谢你的贡献，但要求你以某种方式把它变成一系列较小的变化。在您已经编写了一个变更之后，可能需要进行大量的工作来分割它，或者需要花费大量的时间来争论为什么评审人员应该接受您的大变更。编写小的CL更容易。</p>\r\n                        <h2>什么样的是小型CL?</h2>\r\n                        <p className=\"indent-2\">通常，CL的正确大小是一个<b>自包含的更改</b>。这意味着:</p>\r\n                        <ul className=\"indent-2\">\r\n                            <li>CL做了一个最小的更改，<b>只处理一件事</b>。这通常只是一个功能的一部分，而不是一个完整的功能。一般来说，编写太小的CL与编写太大的CL相比，最好不要犯错误。和你的评审人员一起找出一个可接受的大小。</li>\r\n                            <li>评审人员需要了解的关于CL(除了未来的开发)的所有内容都在CL、CL的描述、现有的代码库或他们已经评审过的CL中。</li>\r\n                            <li>在CL签入之后，系统将继续为用户和开发人员提供良好的工作。</li>\r\n                            <li>CL并不是小到难以理解的程度。如果您添加了一个新的API，您应该在同一个CL中包含该API的用法，以便评审人员能够更好地理解如何使用该API。这也防止检入未使用的api。</li>\r\n                        </ul>\r\n                        <p className=\"indent-2\">对于多大是“太大”没有硬性规定。对于CL, 100行通常是一个合理的大小，而1000行通常太大，但是这取决于您的评审人员的判断。一个变更所散布的文件数量也会影响它的“大小”。在一个文件中更改200行可能没有问题，但是在50个文件中进行更改通常会太大。</p>\r\n                        <p className=\"indent-2\">请记住，尽管从开始编写代码的那一刻起，您就与代码密切相关，但是评审人员通常没有上下文。对于您来说，一个可接受大小的CL可能会让您的评审人员感到难以接受。如果有疑问，可以编写比您认为需要编写的更小的CL。评审人员很少抱怨得到的CL太小。</p>\r\n                        <h2>什么时候可以用大型CL?</h2>\r\n                        <p className=\"indent-2\">在一些情况下，大的变化并不那么糟糕:</p>\r\n                        <ul className=\"indent-2\">\r\n                            <li>您通常可以将整个文件的删除计算为更改的一行，因为评审人员不需要花费很长时间来评审。</li>\r\n                            <li>有时候，大型CL是由您完全信任的自动重构工具生成的，评审人员的工作就是进行全面检查，并说他们确实需要更改。这些CL可以更大，尽管上面的一些警告(如合并和测试)仍然适用。</li>\r\n                        </ul>\r\n                        <h3>按文件分割</h3>\r\n                        <p className=\"indent-2\">分割CL的另一种方法是将需要不同评审人员的文件分组，这些文件在其他方面都是自包含的更改。</p>\r\n                        <p className=\"indent-2\">例如:发送一个CL用于修改协议缓冲区，另一个CL用于修改使用该原型的代码。您必须在代码CL之前提交原型CL，但是它们可以同时被评审。如果您这样做，您可能希望将您编写的另一个CL通知这两组评审人员，以便他们了解您的更改的上下文。</p>\r\n                        <p className=\"indent-2\">另一个例子:您发送一个CL用于代码更改，另一个CL用于使用该代码的配置或实验;如果有必要，这也更容易回滚，因为配置/实验文件有时会比代码更改更快地推入生产环境。</p>\r\n                        <h2>分离重构</h2>\r\n                        <p className=\"indent-2\">通常最好在一个单独的CL中进行重构，而不是进行特性更改或bug修复。例如，移动和重命名一个类应该与修复该类中的一个bug放在不同的CL中。当每个CL独立时，评审人员更容易理解它们所引入的更改。</p>\r\n                        <p className=\"indent-2\">不过，可以在特性更改或bug修复CL中包含小的清理，比如修复局部变量名。由开发人员和评审人员来决定何时重构太大，以至于如果包含在当前的CL中，评审将变得更加困难。</p>\r\n                        <h2>将相关的测试代码保存在同一个CL中</h2>\r\n                        <p className=\"indent-2\">避免将测试代码分割成单独的CL。验证代码修改的测试应该放在同一个CL中，即使它增加了代码行数。</p>\r\n                        <p className=\"indent-2\">然而，独立的测试修改可以首先进入单独的CL，类似于重构指南。这包括:</p>\r\n                        <ul className=\"indent-2\">\r\n                            <li>用新的测试验证已存在的、已提交的代码。</li>\r\n                            <li>重构测试代码(例如引入helper函数)。</li>\r\n                            <li>引入更大的测试框架代码(例如集成测试)。</li>\r\n                        </ul>\r\n                        <h2>不要破坏构造</h2>\r\n                        <p className=\"indent-2\">如果您有几个相互依赖的CL，那么您需要找到一种方法来确保在提交每个CL之后整个系统都能继续工作。否则，您可能会在CL提交之间中断所有开发人员的构造几分钟(如果以后的CL提交出现意外的错误，甚至更长时间)。</p>\r\n                        <h2>如果不能让它足够小</h2>\r\n                        <p className=\"indent-2\">有时您会遇到这样的情况，您的CL似乎必须很大。这很少是真的。实践编写小型CL的作者几乎总是能够找到一种方法，将功能分解为一系列小的更改。</p>\r\n                        <p className=\"indent-2\">在编写大型CL之前，请考虑在其前面加上一个只进行重构的CL是否可以为更干净的实现铺平道路。与您的队友交谈，看看是否有人对如何在小型CL中实现该功能有想法。</p>\r\n                        <p className=\"indent-2\">如果所有这些选项都失败了(这应该是非常罕见的)，那么请提前获得评审人员的同意，以便评审一个大型CL，这样他们就会得到关于将要发生什么的警告。在这种情况下，预期要经历很长时间的评审过程，警惕不要引入错误，并在编写测试时格外勤奋。</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"directory\">\r\n                    <Directory articleTree={this.state.articleTree}></Directory>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}